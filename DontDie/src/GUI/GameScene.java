/*
 * Don't Die Game
 * CS 321 - 01
 * Team 4: Hunter Bales, Harleigh Bass, Anushka Bhattacharjee, Liam Coddington
 * FALL SEMESTER - 2 December 2019
 */
package GUI;

import Model.*;
import organism.*;
import dontdie.audio.*;
import java.awt.Color;

import java.awt.Container;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 * GameScene GUI for showing all Images, playing audio, and activating QTEs.
 * Javadocs checked by Anushka Bhattacharjee * 
 * Art (Arrows, JLabel Background Scenes, Boat, Food, Shelter, Character, Enemies) by Harleigh Bass 
 * @author Harleigh Bass and Liam Coddington
 */
public class GameScene extends javax.swing.JFrame {
    // Movement variables
    int locationCount = 0;
    JLabel currentSceneLabel = new JLabel();
    int moveCount = 0;
    
    // GameLoop and Player variables
    GameLoop gameLoop = GameLoop.getInstance();
    Player player = new Player();
    PointSystem pointSystem = PointSystem.getInstance(player, gameLoop);
    int energy;
    boolean caveFoodTaken = false;
    boolean caveShelterTaken = false;
    boolean forestFoodTaken = false;
    boolean forestShelterTaken = false;
    boolean lakeFoodTaken = false;
    boolean lakeShelterTaken = false;

    // Quick Time Event Variables
    QuickTimeEvents qte = new QuickTimeEvents();
    boolean qteactivate = false;
    int qteSceneNumber = 4;
    boolean qtNotFirst = false;

    // Variables for Quicktime Events
    int batEnemy = 0;
    int squirrelEnemy = 1;
    int gooseEnemy = 2;
    
    public static JLabel batLabel = new JLabel();
    public static JLabel squirrelLabel = new JLabel();
    public static JLabel gooseLabel = new JLabel();
    
    

    /**
     * Creates new form
     */
    public GameScene() {
        // Sets layout for JFrame
        setLayout(null);

        // Create Container to keep everything orderly inside JFrame
        Container con;
        con = getContentPane();

        // All Status Bars
        StatBarPanel statBars = new StatBarPanel();
        statBars.setBounds(20, 20, 350, 130);
        statBars.setVisible(true);
        con.add(statBars);
        
        // Do the same for Status bars but for Time of Day here

        initComponents();

        // Button Colors and Fonts
        startMenuButton.setForeground(Color.WHITE);
        optionsMenuButton.setForeground(Color.WHITE);
        startMenuButton.setFont(new Font("Arial Black", Font.PLAIN, 14));
        optionsMenuButton.setFont(new Font("Arial Black", Font.PLAIN, 14));

        // Set Button color and font
        battleButton.setBackground(Color.RED);
        battleButton.setForeground(Color.WHITE);
        battleButton.setText("CLICK");
        battleButton.setFont(new Font("Arial Black", Font.PLAIN, 14));
        
        // Set DayInfoPanel color and font
        dayInfoPanel.setBackground(Color.GRAY);
        areaInfoImage.setForeground(Color.WHITE);
        areaInfoImage.setFont(new Font("Dialog", Font.BOLD, 18));
        
        updateTimeOfDayInfo();

        // Size of gameSceneBGImage JLabel & the image on it
        // Harleigh  note: resize 80, 80, 85 for all other images to match
        setSize(1140, 814);

        AudioController audio = new AudioController();
        audio.playClearingSoundtrack();

        // Set JFrame to appear in middle of the screen.
        setLocationRelativeTo(null);

        // Set Starting JLabel Image to the clearing
        // All other scenes and directional buttons not visible for now
        clearingImage.setVisible(true);
        caveImage.setVisible(false);
        lakeImage.setVisible(false);
        forestImage.setVisible(false);
        leftArrowButton.setVisible(false);
        rightArrowButton.setVisible(false);
        
        // Set all food, water, and shelter to invisible for now
        caveFood.setVisible(false);
        caveShelter.setVisible(false);
        forestFood.setVisible(false);
        forestShelter.setVisible(false);
        lakeFood.setVisible(false);
        lakeShelter.setVisible(false);
        waterLabel.setVisible(false);
        boatImage.setVisible(false);

        // For Quicktime Events only, invisible for now
        battleButton.setVisible(false);
        batImage.setVisible(false);
        gooseImage.setVisible(false);
        squirrelImage.setVisible(false);
        
        batLabel = batImage;
        gooseLabel = gooseImage;
        squirrelLabel = squirrelImage;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        areaInfoImage = new javax.swing.JLabel();
        dayInfoPanel = new javax.swing.JPanel();
        battleButton = new javax.swing.JButton();
        enterCaveButton = new javax.swing.JButton();
        enterForestButton = new javax.swing.JButton();
        enterLakeButton = new javax.swing.JButton();
        leftArrowButton = new javax.swing.JButton();
        rightArrowButton = new javax.swing.JButton();
        startMenuButton = new javax.swing.JButton();
        optionsMenuButton = new javax.swing.JButton();
        gooseImage = new javax.swing.JLabel();
        squirrelImage = new javax.swing.JLabel();
        batImage = new javax.swing.JLabel();
        characterLabel = new javax.swing.JLabel();
        boatImage = new javax.swing.JLabel();
        caveFood = new javax.swing.JLabel();
        caveShelter = new javax.swing.JLabel();
        caveImage = new javax.swing.JLabel();
        forestFood = new javax.swing.JLabel();
        forestShelter = new javax.swing.JLabel();
        forestImage = new javax.swing.JLabel();
        lakeFood = new javax.swing.JLabel();
        lakeShelter = new javax.swing.JLabel();
        waterLabel = new javax.swing.JLabel();
        lakeImage = new javax.swing.JLabel();
        transparentPane = new javax.swing.JPanel();
        clearingImage = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(null);

        areaInfoImage.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        areaInfoImage.setForeground(new java.awt.Color(0, 0, 0));
        areaInfoImage.setText("THIS IS THE DAY #/TIME OF DAY/AREA");
        getContentPane().add(areaInfoImage);
        areaInfoImage.setBounds(860, 10, 270, 110);
        getContentPane().add(dayInfoPanel);
        dayInfoPanel.setBounds(840, 20, 270, 90);

        battleButton.setText("CLICK!");
        getContentPane().add(battleButton);
        battleButton.setBounds(620, 400, 130, 50);

        enterCaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/left arrow.png"))); // NOI18N
        enterCaveButton.setText("Go to Cave");
        enterCaveButton.setBorderPainted(false);
        enterCaveButton.setContentAreaFilled(false);
        enterCaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterCaveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(enterCaveButton);
        enterCaveButton.setBounds(200, 500, 180, 130);

        enterForestButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/down arrow.png"))); // NOI18N
        enterForestButton.setText("Go to Forest");
        enterForestButton.setBorderPainted(false);
        enterForestButton.setContentAreaFilled(false);
        enterForestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterForestButtonActionPerformed(evt);
            }
        });
        getContentPane().add(enterForestButton);
        enterForestButton.setBounds(770, 230, 160, 180);

        enterLakeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/right arrow.png"))); // NOI18N
        enterLakeButton.setText("Go to Lake");
        enterLakeButton.setBorderPainted(false);
        enterLakeButton.setContentAreaFilled(false);
        enterLakeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterLakeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(enterLakeButton);
        enterLakeButton.setBounds(640, 610, 160, 120);

        leftArrowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/left arrow.png"))); // NOI18N
        leftArrowButton.setText("GO LEFT");
        leftArrowButton.setToolTipText("");
        leftArrowButton.setBorderPainted(false);
        leftArrowButton.setContentAreaFilled(false);
        leftArrowButton.setMaximumSize(new java.awt.Dimension(100, 150));
        leftArrowButton.setMinimumSize(new java.awt.Dimension(100, 150));
        leftArrowButton.setPreferredSize(new java.awt.Dimension(100, 150));
        leftArrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftArrowButtonActionPerformed(evt);
            }
        });
        getContentPane().add(leftArrowButton);
        leftArrowButton.setBounds(180, 200, 190, 130);

        rightArrowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/right arrow.png"))); // NOI18N
        rightArrowButton.setText("GO RIGHT");
        rightArrowButton.setBorderPainted(false);
        rightArrowButton.setContentAreaFilled(false);
        rightArrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightArrowButtonActionPerformed(evt);
            }
        });
        getContentPane().add(rightArrowButton);
        rightArrowButton.setBounds(910, 390, 200, 120);

        startMenuButton.setBackground(new java.awt.Color(0, 153, 153));
        startMenuButton.setText("Main Menu");
        startMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMenuButtonActionPerformed(evt);
            }
        });
        getContentPane().add(startMenuButton);
        startMenuButton.setBounds(480, 20, 130, 40);

        optionsMenuButton.setBackground(new java.awt.Color(0, 153, 153));
        optionsMenuButton.setText("Options");
        optionsMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsMenuButtonActionPerformed(evt);
            }
        });
        getContentPane().add(optionsMenuButton);
        optionsMenuButton.setBounds(620, 20, 100, 40);

        gooseImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/temp goose.png"))); // NOI18N
        getContentPane().add(gooseImage);
        gooseImage.setBounds(800, 350, 330, 290);

        squirrelImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/temp squirrel.png"))); // NOI18N
        getContentPane().add(squirrelImage);
        squirrelImage.setBounds(660, 350, 260, 240);

        batImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/temp bat.png"))); // NOI18N
        getContentPane().add(batImage);
        batImage.setBounds(750, 60, 330, 290);

        characterLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/character.png"))); // NOI18N
        getContentPane().add(characterLabel);
        characterLabel.setBounds(470, 430, 190, 130);

        boatImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/boat.png"))); // NOI18N
        getContentPane().add(boatImage);
        boatImage.setBounds(50, 190, 950, 480);

        caveFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/cave food.png"))); // NOI18N
        caveFood.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                caveFoodMouseClicked(evt);
            }
        });
        getContentPane().add(caveFood);
        caveFood.setBounds(360, 560, 70, 110);

        caveShelter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/cave shelter.png"))); // NOI18N
        caveShelter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                caveShelterMouseClicked(evt);
            }
        });
        getContentPane().add(caveShelter);
        caveShelter.setBounds(560, 220, 380, 330);

        caveImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/cave.png"))); // NOI18N
        getContentPane().add(caveImage);
        caveImage.setBounds(0, 0, 3428, 816);

        forestFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/forest food.png"))); // NOI18N
        forestFood.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                forestFoodMouseClicked(evt);
            }
        });
        getContentPane().add(forestFood);
        forestFood.setBounds(80, 600, 160, 110);

        forestShelter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/forest shelter.png"))); // NOI18N
        forestShelter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                forestShelterMouseClicked(evt);
            }
        });
        getContentPane().add(forestShelter);
        forestShelter.setBounds(320, 90, 530, 370);

        forestImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/forest.png"))); // NOI18N
        getContentPane().add(forestImage);
        forestImage.setBounds(0, 0, 3428, 816);

        lakeFood.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/lake food.png"))); // NOI18N
        lakeFood.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lakeFoodMouseClicked(evt);
            }
        });
        getContentPane().add(lakeFood);
        lakeFood.setBounds(820, 600, 210, 120);

        lakeShelter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/lake shelter.png"))); // NOI18N
        lakeShelter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lakeShelterMouseClicked(evt);
            }
        });
        getContentPane().add(lakeShelter);
        lakeShelter.setBounds(500, -50, 340, 360);

        waterLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                waterLabelMouseClicked(evt);
            }
        });
        getContentPane().add(waterLabel);
        waterLabel.setBounds(0, 210, 1140, 580);

        lakeImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/lake.png"))); // NOI18N
        getContentPane().add(lakeImage);
        lakeImage.setBounds(0, 0, 3428, 816);
        getContentPane().add(transparentPane);
        transparentPane.setBounds(0, 0, 1140, 820);

        clearingImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/mainSceneBG.png"))); // NOI18N
        getContentPane().add(clearingImage);
        clearingImage.setBounds(0, -4, 1140, 820);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * If Main Menu button is pressed, this runs the StartMenu class JFrame.
     *
     * @param evt for being clicked on.
     */
    private void startMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMenuButtonActionPerformed
        StartMenu startmenu = new StartMenu();
        startmenu.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_startMenuButtonActionPerformed

    /**
     * If Options button is pressed, this runs the OptionsMenu class JFrame.
     *
     * @param evt for being clicked on.
     */
    private void optionsMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsMenuButtonActionPerformed
        OptionsMenu optionsmenu = new OptionsMenu();
        optionsmenu.setVisible(true);
    }//GEN-LAST:event_optionsMenuButtonActionPerformed

    /**
     * If Cave arrow button is clicked, loads Cave scene.
     *
     * @param evt for being clicked on.
     */
    private void enterCaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterCaveButtonActionPerformed
        AudioController audio = new AudioController();
        audio.playCaveSoundtrack();
        caveImage.setVisible(true);
        clearingImage.setVisible(false);
        enterLakeButton.setVisible(false);
        enterForestButton.setVisible(false);
        enterCaveButton.setVisible(false);
        leftArrowButton.setVisible(true);
        rightArrowButton.setVisible(true);
        
        caveFood.setVisible(false);
        caveShelter.setVisible(false);
        forestFood.setVisible(false);
        forestShelter.setVisible(false);
        lakeFood.setVisible(false);
        lakeShelter.setVisible(false);
        boatImage.setVisible(false);
        waterLabel.setVisible(false);
        
        caveFoodTaken = false;
        caveShelterTaken = false;
        forestFoodTaken = false;
        forestShelterTaken = false;
        lakeFoodTaken = false;
        lakeShelterTaken = false;

        locationCount = 0;             // Start traversing scene/image at very beginning
        currentSceneLabel = caveImage; // Making a variable for use with Left/Right Buttons

        moveCount++;
        if (moveCount == 4) {
            player.setEnergy((player.getEnergy() - 1));
            moveCount = 1;
        }

        qteactivate = qte.QTActivate(); // Will a QTE happen?
        qteSceneNumber = qte.QTSection(qteactivate); // If so, which section?

        // If that scene was the very first section, change this boolean to false
        // That way, we can do a check on the middle and last sections when a right arrow button is clicked.
        // Because if we don't do it that way, then the QTE for the middle and last
        // sections will not occur.
        if (qteSceneNumber == 0) {
            qtNotFirst = false;
        } else {
            qtNotFirst = true;
        }
        // If the QTE scene number ends up being the first section, it will happen in the first section only.
        if (qteactivate == true && qteSceneNumber != 4 && qtNotFirst == false) {
            qteactivate = false;
            eventToPerform(qteSceneNumber, batEnemy, battleButton);
        }
    }//GEN-LAST:event_enterCaveButtonActionPerformed

    /**
     * If Forest arrow button is clicked, loads Forest Scene.
     *
     * @param evt for being clicked on.
     */
    private void enterForestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterForestButtonActionPerformed
        AudioController audio = new AudioController();
        audio.playForestSoundtrack();
        forestImage.setVisible(true);
        clearingImage.setVisible(false);
        enterLakeButton.setVisible(false);
        enterForestButton.setVisible(false);
        enterCaveButton.setVisible(false);
        leftArrowButton.setVisible(true);
        rightArrowButton.setVisible(true);
        
        caveFood.setVisible(false);
        caveShelter.setVisible(false);
        forestFood.setVisible(true);
        forestShelter.setVisible(false);
        lakeFood.setVisible(false);
        lakeShelter.setVisible(false);
        boatImage.setVisible(false);
        waterLabel.setVisible(false);
        
        caveFoodTaken = false;
        caveShelterTaken = false;
        forestFoodTaken = false;
        forestShelterTaken = false;
        lakeFoodTaken = false;
        lakeShelterTaken = false;

        locationCount = 0;               // Start traversing scene/image at very beginning
        currentSceneLabel = forestImage; // Making a variable for use with Left/Right Buttons

        moveCount++;
        if (moveCount == 4) {
            player.setEnergy((player.getEnergy() - 1));
            moveCount = 1;
        }

        qteactivate = qte.QTActivate(); // Will a QTE happen?
        qteSceneNumber = qte.QTSection(qteactivate); // If so, which section?

        // If that scene was the very first section, change this boolean to false
        // That way, we can do a check on the middle and last sections when a right arrow button is clicked.
        // Because if we don't do it that way, then the QTE for the middle and last
        // sections will not occur.
        if (qteSceneNumber == 0) {
            qtNotFirst = false;
        } else {
            qtNotFirst = true;
        }
        // If the QTE scene number ends up being the first section, it will happen in the first section only.
        if (qteactivate == true && qteSceneNumber != 4 && qtNotFirst == false) {
            qteactivate = false;
            eventToPerform(qteSceneNumber, squirrelEnemy, battleButton);
        }
    }//GEN-LAST:event_enterForestButtonActionPerformed

    /**
     * If Lake arrow button is clicked, loads Lake Scene.
     *
     * @param evt for being clicked on.
     */
    private void enterLakeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterLakeButtonActionPerformed
        AudioController audio = new AudioController();
        audio.playLakeSoundtrack();
        lakeImage.setVisible(true);
        clearingImage.setVisible(false);
        enterLakeButton.setVisible(false);
        enterForestButton.setVisible(false);
        enterCaveButton.setVisible(false);
        leftArrowButton.setVisible(true);
        rightArrowButton.setVisible(true);
        
        caveFood.setVisible(false);
        caveShelter.setVisible(false);
        forestFood.setVisible(false);
        forestShelter.setVisible(false);
        lakeFood.setVisible(false);
        lakeShelter.setVisible(true);
        boatImage.setVisible(true);
        waterLabel.setVisible(true);
        
        caveFoodTaken = false;
        caveShelterTaken = false;
        forestFoodTaken = false;
        forestShelterTaken = false;
        lakeFoodTaken = false;
        lakeShelterTaken = false;

        locationCount = 0;             // Start traversing scene/image at very beginning
        currentSceneLabel = lakeImage; // Making a variable for use with Left/Right Buttons

        moveCount++;
        if (moveCount == 4) {
            player.setEnergy((player.getEnergy() - 1));
            moveCount = 1;
        }

        qteactivate = qte.QTActivate(); // Will QTE happen?
        qteSceneNumber = qte.QTSection(qteactivate); // If so, which section of the scene?

        // If that scene was the very first section, change this boolean to false
        // That way, we can do a check on the middle and last sections when a right arrow button is clicked.
        // Because if we don't do it that way, then the QTE for the middle and last
        // sections will not occur.
        if (qteSceneNumber == 0) {
            qtNotFirst = false;
        } else {
            qtNotFirst = true;
        }
        // If the QTE scene number ends up being the first section, it will happen in the first section only.
        if (qteactivate == true && qteSceneNumber != 4 && qtNotFirst == false) {
            qteactivate = false;
            eventToPerform(qteSceneNumber, gooseEnemy, battleButton);
        }
    }//GEN-LAST:event_enterLakeButtonActionPerformed

    /**
     * If left arrow button is clicked, move image to the right.
     *
     * @param evt for being clicked on.
     */
    private void leftArrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftArrowButtonActionPerformed
        moveCount++;
        if (moveCount == 4) {
            player.setEnergy((player.getEnergy() - 1));
            moveCount = 1;
        }
        
        // Food and Shelter spawn
        if (locationCount == 1){
            if (currentSceneLabel == caveImage){
                caveFood.setVisible(false);
                caveShelter.setVisible(false);
                
            } else if (currentSceneLabel == forestImage) {
                if (!forestFoodTaken) {forestFood.setVisible(true);}
                forestShelter.setVisible(false);
                
            } else if (currentSceneLabel == lakeImage){
                if (!lakeShelterTaken) {lakeShelter.setVisible(true);}
                lakeFood.setVisible(false);
                
            }
        }
        if (locationCount == 2) {
            if (currentSceneLabel == caveImage){
                if (!caveFoodTaken) {caveFood.setVisible(true);}
                caveShelter.setVisible(false);
                
            } else if (currentSceneLabel == forestImage) {
                if (!forestShelterTaken) {forestShelter.setVisible(true);}
                forestFood.setVisible(false);
                
            } else if (currentSceneLabel == lakeImage){
                lakeFood.setVisible(false);
                lakeShelter.setVisible(false);
                
            }
        }

        switch (locationCount) {
            case 0:
                // The beginning section of scene image
                // code for jLabel positioning here
                // pressed left, so go outside to clearing
                AudioController audio = new AudioController();
                audio.playClearingSoundtrack();
                currentSceneLabel.setVisible(false);
                clearingImage.setVisible(true);
                enterLakeButton.setVisible(true);
                enterForestButton.setVisible(true);
                enterCaveButton.setVisible(true);
                leftArrowButton.setVisible(false);
                boatImage.setVisible(false);
                rightArrowButton.setVisible(false);
                
                
                caveFood.setVisible(false);
                caveShelter.setVisible(false);
                forestFood.setVisible(false);
                forestShelter.setVisible(false);
                lakeFood.setVisible(false);
                lakeShelter.setVisible(false);
                waterLabel.setVisible(false);

                gameLoop.incrementTimeOfDay();
                updateTimeOfDayInfo();
                
                if (isGameOver()) {
                    GameOver gameOver = new GameOver();
                    gameOver.setVisible(true);
                    this.setVisible(false);
                }

                locationCount = 0; // Just In Case
                break;
            case 1:
                // The middle section of scene image
                // pressed left, so go to beginning section of scene image
                currentSceneLabel.setLocation(currentSceneLabel.getX() + 1138, currentSceneLabel.getY());
                locationCount = 0;
                break;
            case 2:
                // The end section of scene image
                // pressed left, so go to middle section of scene image
                currentSceneLabel.setLocation(currentSceneLabel.getX() + 1138, currentSceneLabel.getY());
                locationCount = 1;
                rightArrowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/right arrow.png"))); // Show valid right arrow icon
                break;
            default:
                break;
        }
    }//GEN-LAST:event_leftArrowButtonActionPerformed

    /**
     * If right arrow button is clicked, move image to the left.
     *
     * @param evt for being clicked on.
     */
    private void rightArrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightArrowButtonActionPerformed
        moveCount++;
        if (moveCount == 4) {
            player.setEnergy((player.getEnergy() - 1));
            moveCount = 1;
        }

        
        // Food and Shelter spawn
        if (locationCount == 0) {
            if (currentSceneLabel == caveImage){
                if (!caveFoodTaken) {caveFood.setVisible(true);}
                caveShelter.setVisible(false);
                
            } else if (currentSceneLabel == forestImage) {
                if (!forestShelterTaken) {forestShelter.setVisible(true);}
                forestFood.setVisible(false);
                
            } else if (currentSceneLabel == lakeImage){
                lakeFood.setVisible(false);
                lakeShelter.setVisible(false);
                
            }
        }
        if (locationCount == 1){
            if (currentSceneLabel == caveImage){
                if (!caveShelterTaken) {caveShelter.setVisible(true);}
                caveFood.setVisible(false);
                
            } else if (currentSceneLabel == forestImage) {
                forestFood.setVisible(false);
                forestShelter.setVisible(false);
                
            } else if (currentSceneLabel == lakeImage){
                if (!lakeFoodTaken) {lakeFood.setVisible(true);}
                lakeShelter.setVisible(false);
            }
        }
        
        
        switch (locationCount) {
            case 0:
                // The beginning section of scene image
                // pressed right, so go to middle section of image
                currentSceneLabel.setLocation(currentSceneLabel.getX() - 1138, currentSceneLabel.getY());
                locationCount = 1;

                // Was the qteSceneNumber referencing the middle or last part?
                // And is a QTE supposed to happen?
                // If so, start the event based on the scene
                if (qtNotFirst == true && qteactivate == true && qteSceneNumber != 4) {
                    
                    if (currentSceneLabel == caveImage) {
                        qteactivate = false;
                        eventToPerform(qteSceneNumber, batEnemy, battleButton);
                    } else if (currentSceneLabel == forestImage) {
                        qteactivate = false;
                        eventToPerform(qteSceneNumber, squirrelEnemy, battleButton);
                    } else if (currentSceneLabel == lakeImage) {
                        qteactivate = false;
                        eventToPerform(qteSceneNumber, gooseEnemy, battleButton);
                    }
                }

                break;
            case 1:
                // the middle section of scene image
                // pressed right, so go to end section of scene image
                currentSceneLabel.setLocation(currentSceneLabel.getX() - 1138, currentSceneLabel.getY());
                
                
                locationCount = 2;
                // Can't move any further right, so disable right button
                rightArrowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dontdie/gamescenes/images/right arrow invalid.png"))); // Show invalid right arrow icon

                // Was the qteSceneNumber referencing the middle or last part?
                // And is a QTE supposed to happen?
                // If so, start the event based on the scene
                if (qtNotFirst == true && qteactivate == true && qteSceneNumber != 4) {
                    
                    if (currentSceneLabel == caveImage) {
                        qteactivate = false;
                        eventToPerform(qteSceneNumber, batEnemy, battleButton);
                    } else if (currentSceneLabel == forestImage) {
                        qteactivate = false;
                        eventToPerform(qteSceneNumber, squirrelEnemy, battleButton);
                    } else if (currentSceneLabel == lakeImage) {
                        qteactivate = false;
                        eventToPerform(qteSceneNumber, gooseEnemy, battleButton);
                    }
                }

                break;
            case 2:
                // The end section of scene image
                // Can't move right anymore, button still disabled                
                locationCount = 2; // JIC
                break;
            default:
                break;
        }
    }//GEN-LAST:event_rightArrowButtonActionPerformed

    /**
     * Player gains 5 Thirst points when they click on water.
     * @param evt for being clicked on.
     */
    private void waterLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_waterLabelMouseClicked
        // Can happen as many times as the Player wants
        player.setThirst((player.getThirst() + 5));
    }//GEN-LAST:event_waterLabelMouseClicked

    /**
     * Player gains 5 Hunger points when they click on cave food.
     * @param evt for being clicked on.
     */
    private void caveFoodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_caveFoodMouseClicked
        player.setHunger((player.getHunger() + 5));
        caveFood.setVisible(false);
        caveFoodTaken = true;
    }//GEN-LAST:event_caveFoodMouseClicked

    /**
     * Player gains 5 Energy points when they click on cave shelter.
     * @param evt for being clicked on.
     */
    private void caveShelterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_caveShelterMouseClicked
        player.setEnergy((player.getEnergy() + 5));
        caveShelter.setVisible(false);
        caveShelterTaken = true;
    }//GEN-LAST:event_caveShelterMouseClicked

    /**
     * Player gains 10 Hunger points when they click on forest food.
     * @param evt for being clicked on.
     */
    private void forestFoodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forestFoodMouseClicked
        player.setHunger((player.getHunger() + 10));
        forestFood.setVisible(false);
        forestFoodTaken = true;
    }//GEN-LAST:event_forestFoodMouseClicked

    /**
     * Player gains 15 Energy points when they click on forest shelter.
     * @param evt for being clicked on.
     */
    private void forestShelterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forestShelterMouseClicked
        player.setEnergy((player.getEnergy() + 15));
        forestShelter.setVisible(false);
        forestShelterTaken = true;
    }//GEN-LAST:event_forestShelterMouseClicked

    /**
     * Player gains 10 Hunger points when they click on lake food.
     * @param evt for being clicked on.
     */
    private void lakeFoodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lakeFoodMouseClicked
        player.setHunger((player.getHunger() + 15));
        lakeFood.setVisible(false);
        lakeFoodTaken = true;
    }//GEN-LAST:event_lakeFoodMouseClicked

    /**
     * Player gains 10 Energy points when they click on lake shelter.
     * @param evt for being clicked on.
     */
    private void lakeShelterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lakeShelterMouseClicked
        player.setEnergy((player.getEnergy() + 10));
        lakeShelter.setVisible(false);
        lakeShelterTaken = true;
    }//GEN-LAST:event_lakeShelterMouseClicked

    /**
     * Spawns Enemy based on location for Quick Time Event in specified Image section.
     * 
     * @param qteSceneNumber integer where QTE is supposed to happen.
     * @param enemy integer that expresses which Enemy appears.
     * @param battlebutton passed in button from GameScene to use for mouse clicks.
     */
    public void eventToPerform(int qteSceneNumber, int enemy, JButton battlebutton) {
        switch (qteSceneNumber) {
            case 0:
                // QTE will happen in the first section.
                if (locationCount == 0) {
                    if (enemy == 0) {
                        Bat bat = new Bat();
                        
                        qte.QTBattle(enemy, battlebutton);
                    }
                    if (enemy == 1) {
                        Squirrel squirrel = new Squirrel();
                        
                        qte.QTBattle(enemy, battlebutton);
                    }
                    if (enemy == 2) {
                        Goose goose = new Goose();
                        
                        qte.QTBattle(enemy, battlebutton);
                    }
                }   break;
            case 1:
                // QTE will happen in the middle section.
                if (locationCount == 1) {
                    if (enemy == 0) {
                        Bat bat = new Bat();
                        
                        qte.QTBattle(enemy, battlebutton);
                    }
                    if (enemy == 1) {
                        Squirrel squirrel = new Squirrel();
                        
                        qte.QTBattle(enemy, battlebutton);
                    }
                    if (enemy == 2) {
                        Goose goose = new Goose();
                        
                        qte.QTBattle(enemy, battlebutton);
                    }
                }   break;
            case 2:
                // QTE will happen in the last section.
                if (locationCount == 2) {
                    if (enemy == 0) {
                        Bat bat = new Bat();
                        
                        qte.QTBattle(enemy, battlebutton);
                    }
                    if (enemy == 1) {
                        Squirrel squirrel = new Squirrel();
                        
                        qte.QTBattle(enemy, battlebutton);
                    }
                    if (enemy == 2) {
                        Goose goose = new Goose();
                        
                        qte.QTBattle(enemy, battlebutton);
                    }
                }   break;
            default:
                break;
        }
    }

    /**
     * Updates the GameScene GUI to say which day it is and also change the overlay color to match.
     */
    private void updateTimeOfDayInfo() {
        // Getting the Time of Day to Affect Overlay Plane Color
        switch (gameLoop.getTimeOfDay()) {
            case MORNING:
                System.out.println("Current Time Of Day: " + gameLoop.getTimeOfDay().getName());
                transparentPane.setBackground(new Color(255, 69, 0, 50)); // orange red
                break;
            case EVENING:
                System.out.println("Current Time Of Day: " + gameLoop.getTimeOfDay().getName());
                transparentPane.setBackground(new Color(139, 0, 139, 50)); // magenta
                break;
            case NIGHT:
                System.out.println("Current Time Of Day: " + gameLoop.getTimeOfDay().getName());
                transparentPane.setBackground(new Color(25, 25, 112, 70)); // midnight blue
                break;
            case NOON:
                System.out.println("Current Time Of Day: " + gameLoop.getTimeOfDay().getName());
                transparentPane.setBackground(new Color(0, 0, 0, 0));
                break;
        }
        areaInfoImage.setText(gameLoop.getTimeOfDay().getName() + " of Day #" + gameLoop.getDay());
    }

    /**
     * Monitors if the Player is still alive and if it has been three days to determine if GameOver should happen.
     * @return boolean true if GameOver should happen and false if it's not time yet.
     */
    private boolean isGameOver() {
        if (gameLoop.getDay() > 3 || !player.isPlayerAlive()) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Main function for GameScene.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameScene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameScene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameScene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameScene.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameScene().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel areaInfoImage;
    private javax.swing.JLabel batImage;
    private javax.swing.JButton battleButton;
    private javax.swing.JLabel boatImage;
    private javax.swing.JLabel caveFood;
    private javax.swing.JLabel caveImage;
    private javax.swing.JLabel caveShelter;
    private javax.swing.JLabel characterLabel;
    private javax.swing.JLabel clearingImage;
    private javax.swing.JPanel dayInfoPanel;
    private javax.swing.JButton enterCaveButton;
    private javax.swing.JButton enterForestButton;
    private javax.swing.JButton enterLakeButton;
    private javax.swing.JLabel forestFood;
    private javax.swing.JLabel forestImage;
    private javax.swing.JLabel forestShelter;
    private javax.swing.JLabel gooseImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lakeFood;
    private javax.swing.JLabel lakeImage;
    private javax.swing.JLabel lakeShelter;
    private javax.swing.JButton leftArrowButton;
    private javax.swing.JButton optionsMenuButton;
    private javax.swing.JButton rightArrowButton;
    private javax.swing.JLabel squirrelImage;
    private javax.swing.JButton startMenuButton;
    private javax.swing.JPanel transparentPane;
    private javax.swing.JLabel waterLabel;
    // End of variables declaration//GEN-END:variables
}
